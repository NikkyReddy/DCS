--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   23:56:05 05/30/2015
-- Design Name:   
-- Module Name:   C:/Xilinx/eightbyonestructural/eightbyonetb.vhd
-- Project Name:  eightbyonestructural
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: eightbyone
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY eightbyonetb IS
END eightbyonetb;
 
ARCHITECTURE behavior OF eightbyonetb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT eightbyone
    PORT(
         d : IN  std_logic_vector(7 downto 0);
         s : IN  std_logic_vector(2 downto 0);
         z : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal d : std_logic_vector(7 downto 0) := (others => '0');
   signal s : std_logic_vector(2 downto 0) := (others => '0');

 	--Outputs
   signal z : std_logic;
   -- No clocks detected in port list. Replace <clock> below with 
   -- appropriate port name 
 
 --  constant <clock>_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: eightbyone PORT MAP (
          d => d,
          s => s,
          z => z
        );

   -- Clock process definitions
--   <clock>_process :process
--   begin
--		<clock> <= '0';
--		wait for <clock>_period/2;
--		<clock> <= '1';
--		wait for <clock>_period/2;
--   end process;
-- 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
   --   wait for 100 ns;	

     -- wait for <clock>_period*10;

      -- insert stimulus here 
d(0)<='0';
d(2)<='1';
d(1)<='1';
d(3)<='1';
s(0)<='0';
s(1)<='0';
wait for 10 ns;
d(0)<='1';
d(2)<='0';
s(0)<='0';
s(1)<='1';
wait for 10 ns;
d(1)<='0';
d(2)<='1';
s(0)<='1';
s(1)<='0';
wait for 10 ns;
d(3)<='0';
d(1)<='1';
s(0)<='1';
s(1)<='1';
wait for 10 ns;
d(3)<='1';
d(4)<='0';
d(5)<='1';
d(6)<='1';
d(7)<='1';
s(2)<='1';
s(0)<='0';
s(1)<='0';
wait for 10 ns;
d(4)<='1';
d(6)<='0';
s(0)<='0';
s(1)<='1';
wait for 10 ns;
d(6)<='1';
d(5)<='0';
s(0)<='1';
s(1)<='0';
wait for 10 ns;
d(5)<='1';
d(7)<='0';
s(0)<='1';
s(1)<='1';
wait for 10 ns;
      wait;
   end process;

END;
