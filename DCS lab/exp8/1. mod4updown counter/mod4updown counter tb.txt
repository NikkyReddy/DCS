--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   18:17:28 06/05/2015
-- Design Name:   
-- Module Name:   C:/Xilinx/counter/counternewtb.vhd
-- Project Name:  counter
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: counternew
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY counternewtb IS
END counternewtb;
 
ARCHITECTURE behavior OF counternewtb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT counternew
    PORT(
         d : IN  std_logic;
         clk : IN  std_logic;
         ctrl : IN  std_logic;
         reset : IN  std_logic;
         q : INOUT  std_logic_vector(0 to 1);
         qbar : INOUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal d : std_logic := '0';
   signal clk : std_logic := '0';
   signal ctrl : std_logic := '0';
   signal reset : std_logic := '0';

	--BiDirs
   signal q : std_logic_vector(0 to 1);
   signal qbar : std_logic;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: counternew PORT MAP (
          d => d,
          clk => clk,
          ctrl => ctrl,
          reset => reset,
          q => q,
          qbar => qbar
        );

   -- Clock process definitions
   clk_process :process
   begin
	   clk<='1';
	  wait for 2 ns;
		clk <= '0';
		wait for 5 ns;
		clk <= '1';
		wait for 3 ns;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      --wait for 100 ns;	

    --  wait for clk_period*10;
reset<='1';
wait for 10 ns;
reset<='0';
wait for 10 ns;
ctrl<='1';
wait for 40 ns;
ctrl<='0';
wait for 10 ns;
      -- insert stimulus here 

      wait;
   end process;

END;
