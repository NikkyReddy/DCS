--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   19:29:32 06/06/2015
-- Design Name:   
-- Module Name:   C:/Xilinx/counters/uptbenew.vhd
-- Project Name:  counters
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: upcounter
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY uptbenew IS
END uptbenew;
 
ARCHITECTURE behavior OF uptbenew IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT upcounter
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         red : OUT  std_logic;
         yellow : OUT  std_logic;
         green : OUT  std_logic;
         q : INOUT  std_logic_vector(0 to 3)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';

	--BiDirs
   signal q : std_logic_vector(0 to 3);

 	--Outputs
   signal red : std_logic;
   signal yellow : std_logic;
   signal green : std_logic;

   -- Clock period definitions
  -- constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: upcounter PORT MAP (
          clk => clk,
          rst => rst,
          red => red,
          yellow => yellow,
          green => green,
          q => q
        );

   -- Clock process definitions
   clk_process :process
   begin
	clk<='1';
	wait for 2 ns;
		clk <= '0';
		wait for 5 ns;
		clk <= '1';
		wait for 3 ns;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
   --   wait for 100 ns;	

     -- wait for clk_period*10;

      -- insert stimulus here 
rst<='1';
wait for 10 ns;
rst<='0';
wait for 10 ns;

      wait;
   end process;

END;
